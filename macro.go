package calc

import (
	"github.com/maxmoehl/calc/types"
)

// macroIndex maps the identifier of a macro to a function that can be used to create
// a macro for that identifier.
var macroIndex map[string]types.NewMacro

// macro acts as a wrapper for the Macro interface. It is used to add the Locked
// function to implement the Node interface which is needed in order to be part
// of the abstract syntax tree generated by the parser.
type macro struct {
	// m is the actual macro
	m types.Macro
}

func (m *macro) Locked() bool {
	return true
}

func (m *macro) Eval() (float64, error) {
	return m.m.Eval()
}

// GetLoadedMacros is function to check which macros are enabled. It returns
// a list of strings, each string being a valid identifier.
func GetLoadedMacros() (macroIdentifier []string) {
	for n := range macroIndex {
		macroIdentifier = append(macroIdentifier, n)
	}
	return
}